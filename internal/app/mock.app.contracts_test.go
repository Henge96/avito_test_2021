// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	app "packs/internal/app"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockRepo) Change(ctx context.Context, walletID uint, amount decimal.Decimal, status string) (*app.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", ctx, walletID, amount, status)
	ret0, _ := ret[0].(*app.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Change indicates an expected call of Change.
func (mr *MockRepoMockRecorder) Change(ctx, walletID, amount, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockRepo)(nil).Change), ctx, walletID, amount, status)
}

// CreateWallet mocks base method.
func (m *MockRepo) CreateWallet(ctx context.Context, userID uint) (*app.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, userID)
	ret0, _ := ret[0].(*app.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockRepoMockRecorder) CreateWallet(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockRepo)(nil).CreateWallet), ctx, userID)
}

// GetUserTransactionsByParams mocks base method.
func (m *MockRepo) GetUserTransactionsByParams(ctx context.Context, params app.UserTransactionsParam) ([]app.TransactionsLists, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactionsByParams", ctx, params)
	ret0, _ := ret[0].([]app.TransactionsLists)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserTransactionsByParams indicates an expected call of GetUserTransactionsByParams.
func (mr *MockRepoMockRecorder) GetUserTransactionsByParams(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactionsByParams", reflect.TypeOf((*MockRepo)(nil).GetUserTransactionsByParams), ctx, params)
}

// GetWallet mocks base method.
func (m *MockRepo) GetWallet(ctx context.Context, i uint) (*app.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, i)
	ret0, _ := ret[0].(*app.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockRepoMockRecorder) GetWallet(ctx, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockRepo)(nil).GetWallet), ctx, i)
}

// TransactionBetweenUsers mocks base method.
func (m *MockRepo) TransactionBetweenUsers(ctx context.Context, transfer app.Transaction, status string) (*app.TransactionsLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionBetweenUsers", ctx, transfer, status)
	ret0, _ := ret[0].(*app.TransactionsLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionBetweenUsers indicates an expected call of TransactionBetweenUsers.
func (mr *MockRepoMockRecorder) TransactionBetweenUsers(ctx, transfer, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionBetweenUsers", reflect.TypeOf((*MockRepo)(nil).TransactionBetweenUsers), ctx, transfer, status)
}

// MockExchangeClient is a mock of ExchangeClient interface.
type MockExchangeClient struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeClientMockRecorder
}

// MockExchangeClientMockRecorder is the mock recorder for MockExchangeClient.
type MockExchangeClientMockRecorder struct {
	mock *MockExchangeClient
}

// NewMockExchangeClient creates a new mock instance.
func NewMockExchangeClient(ctrl *gomock.Controller) *MockExchangeClient {
	mock := &MockExchangeClient{ctrl: ctrl}
	mock.recorder = &MockExchangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeClient) EXPECT() *MockExchangeClientMockRecorder {
	return m.recorder
}

// ExchangeCurrency mocks base method.
func (m *MockExchangeClient) ExchangeCurrency(ctx context.Context, sum decimal.Decimal, ticker string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCurrency", ctx, sum, ticker)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCurrency indicates an expected call of ExchangeCurrency.
func (mr *MockExchangeClientMockRecorder) ExchangeCurrency(ctx, sum, ticker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCurrency", reflect.TypeOf((*MockExchangeClient)(nil).ExchangeCurrency), ctx, sum, ticker)
}
